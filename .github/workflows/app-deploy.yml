name: app-deploy
run-name: Package and deploy application
on:
  push:
    branches:
      - main
  workflow_dispatch: {}

jobs:
  mvn-install-with-libs:
    runs-on: ubuntu-latest
    steps:
      - name: Dummy
        run: echo Disabled
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven
      - name: Maven Install and Copy libraries
        run: mvn install dependency:copy-dependencies
      - name: Prepare app directory
        run: | 
          cp ./modules/web-app/target/svc-engine-webapi-*.jar ./docker/temp_libs/ 
          cp ./modules/web-app/target/dependency/* ./docker/temp_libs/
      - name: Archive app directory
        uses: actions/upload-artifact@v4
        with:
          name: app-libs-dir
          path: ./docker/temp_libs/*
          retention-days: 1
      - id: OutputProjectVersion
        run: echo "project_version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> "$GITHUB_OUTPUT"
    outputs:
      project_version: ${{ steps.OutputProjectVersion.outputs.project_version }}

  build-docker-image:
    needs: mvn-install-with-libs
    runs-on: ubuntu-latest
    env:
      PROJECT_VERSION: ${{ needs.mvn-install-with-libs.outputs.project_version }}
    steps:
      - name: Dummy
        run: echo Disabled
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Download built artifact
        uses: actions/download-artifact@v4
        with:
          name: app-libs-dir
          path: ./docker/temp_libs/
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: ./docker
          push: true
          tags: ${{ vars.DOCKERHUB_USERNAME }}/fiap-videoslice-svc-engine:latest,${{ vars.DOCKERHUB_USERNAME }}/fiap-videoslice-svc-engine:${{env.PROJECT_VERSION}}

  prepare-k8s-aws-dependencies:
    needs:
      - mvn-install-with-libs
      - build-docker-image
    runs-on: ubuntu-latest
    env:
      PROJECT_VERSION: ${{ needs.mvn-install-with-libs.outputs.project_version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: "Configure AWS Credentials"
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}

      - name: Create S3 Bucket 
        run: |
          chmod +x ./deploy/utils/create-s3-bucket.sh
          ./deploy/utils/create-s3-bucket.sh  ${{vars.VIDEO_PROCESS_REQUEST_BUCKET_NAME }}

      - name: Create SQS Queue Videos To Be Processed
        id: create-sqs-videos-tbp
        run: |
          chmod +x ./deploy/utils/create-sqs-queue.sh
          ./deploy/utils/create-sqs-queue.sh ${{vars.VIDEOSLICE_VIDEOS_TO_BE_PROCESSED_QUEUE_NAME}}
          echo "QUEUE=$QUEUE_URL" >> $GITHUB_OUTPUT
          echo "SQS_ENDPOINT=$SQS_ENDPOINT" >> $GITHUB_OUTPUT
      
      - name: Create SQS Queue VIDEOS_STATUS
        id: create-sqs-video-status
        run: |
          ./deploy/utils/create-sqs-queue.sh ${{vars.VIDEOSLICE_VIDEOS_STATUS_QUEUE_NAME}}
          echo "QUEUE=$QUEUE_URL" >> $GITHUB_OUTPUT
          echo "SQS_ENDPOINT=$SQS_ENDPOINT" >> $GITHUB_OUTPUT

      - name: Verify EKS cluster
        run: |
          chmod +x ./deploy/utils/check-cluster-status.sh
          ./deploy/utils/check-cluster-status.sh ${{vars.EKS_CLUSTER_NAME}}

      - name: Get API Gateway info
        id: get-apigw-info
        run: |
          chmod +x ./deploy/utils/get-external-api-info.sh
          ./deploy/utils/get-external-api-info.sh ${{vars.API_GATEWAY_NAME}} 
          echo "API_ID=$API_ID" >> $GITHUB_OUTPUT
          echo "API_URL=$API_URL" >> $GITHUB_OUTPUT
          
      - name: Prepare AWS
        run: |
          cat ./deploy/k8s/app/aws-configs-template.yml \
             | sed "s/{ACCESS_KEY_ID}/$(echo -n '${{secrets.AWS_ACCESS_KEY_ID}}' | tr -d '\n')/" \
             | sed "s|{SECRET_ACCESS_KEY}|$(echo -n '${{secrets.AWS_SECRET_ACCESS_KEY}}' | tr -d '\n')|" \
             | sed "s|{SESSION_TOKEN}|$(echo -n '${{secrets.AWS_SESSION_TOKEN}}' | tr -d '\n')|" \
             | sed "s/{VIDEOSLICE_VIDEOS_BUCKET_NAME}/$(echo -n '${{vars.VIDEOSLICE_VIDEOS_BUCKET_NAME}}' | tr -d '\n')/" \
             | sed "s|{VIDEOSLICE_VIDEOS_TO_BE_PROCESSED_QUEUE_NAME}|$(echo -n '${{vars.VIDEOSLICE_VIDEOS_TO_BE_PROCESSED_QUEUE_NAME}}' | tr -d '\n')|" \
             | sed "s|{VIDEOSLICE_VIDEOS_STATUS_QUEUE_NAME}|$(echo -n '${{vars.VIDEOSLICE_VIDEOS_STATUS_QUEUE_NAME}}' | tr -d '\n')|" \
             | sed "s|{VIDEOSLICE_VIDEOS_TO_BE_PROCESSED_QUEUE_URL}|${{ steps.create-sqs-videos-tbp.outputs.QUEUE }}|" \
             | sed "s|{VIDEOSLICE_VIDEOS_STATUS_QUEUE_URL}|${{ steps.create-sqs-video-status.outputs.QUEUE }}|" \
             | sed "s|{SQS_ENDPOINT}|${{ steps.create-sqs-videos-tbp.outputs.SQS_ENDPOINT }}|" \
             | sed "s|{S3_ENDPOINT}|${{ steps.create-sqs-videos-tbp.outputs.SQS_ENDPOINT }}|" \
             | sed "s|{AWS_ENDPOINT}|${{ steps.create-sqs-videos-tbp.outputs.SQS_ENDPOINT }}|" \
             | sed "s/{REGION}/us-east-1/" > ./kube-aws-configs.yml

      - name: Update image in App Deployment
        run: |
          cat ./deploy/k8s/app/app-deployment.yml \
            | sed "s|image: .*fiap-videoslice-svc-engine.*$|image: ${{ vars.DOCKERHUB_USERNAME }}/fiap-videoslice-svc-engine:${{env.PROJECT_VERSION}}|" > ./kube-app-deployment-updated.yml

      - name: Upload kube artifacts
        uses: actions/upload-artifact@v4
        with:
          name: kube-artifacts
          path: "kube-*.yml"
          retention-days: 1

  deploy-k8s:
    needs: prepare-k8s-aws-dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: "Configure AWS Credentials"
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}

      - name: Download configmaps
        uses: actions/download-artifact@v4
        with:
          name: kube-artifacts
          path: ./

      - name: Configure kubectl
        run: aws eks update-kubeconfig --name ${{vars.EKS_CLUSTER_NAME}}

      - name: Create AWS-Services ConfigMap
        run: kubectl apply -f kube-aws-configs.yml

      - name: Create App Internal service
        run: kubectl apply -f deploy/k8s/app/app-service-internal.yml

      - name: Create App LoadBalancer service
        run: kubectl apply -f deploy/k8s/app/app-service-loadbalancer.yml

      - name: Create App Deployment
        run: kubectl apply -f kube-app-deployment-updated.yml

      - name: Enable Metrics Server
        run: kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml

      - name: Create App HPA
        run: kubectl apply -f deploy/k8s/app/app-hpa.yml
